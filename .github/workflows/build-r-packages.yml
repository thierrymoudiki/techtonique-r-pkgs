name: Build R packages repository

on:
  push:
    branches:
      - master
      - main
    paths:
      - 'r-packages/**'
      - '.github/workflows/r-packages.yml'
  workflow_dispatch:
    inputs:
      job_to_run:
        description: 'Job to run (leave empty for full workflow)'
        required: false
        default: ''

jobs:
  build-source:
    if: github.event.inputs.job_to_run == '' || github.event.inputs.job_to_run == 'build-source'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Add verbose cleanup and verification
      - name: Clean workspace
        shell: pwsh
        run: |
          Write-Host "Current directory: $PWD"
          Write-Host "Initial contents:"
          Get-ChildItem -Force
          
          Write-Host "Cleaning workspace..."
          Remove-Item -Path "r-packages" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "artifacts" -Recurse -Force -ErrorAction SilentlyContinue
          New-Item -Path "r-packages/${{ matrix.path }}" -ItemType Directory -Force
          
          Write-Host "After cleanup:"
          Get-ChildItem -Force
          Write-Host "r-packages contents:"
          Get-ChildItem -Path "r-packages" -Recurse -File | Select-Object FullName

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qpdf texinfo texlive-latex-base texlive-latex-extra \
            libcurl4-openssl-dev libssl-dev libxml2-dev \
            libudunits2-dev libgdal-dev libgeos-dev libproj-dev \
            libfontconfig1-dev libharfbuzz-dev libfribidi-dev

      - name: Install pak and dependencies
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/dev/")
          pak::pak(c(
            "remotes", 
            "Rcpp",
            "timeDate",
            "zoo",
            "xts",
            "tseries",
            "fracdiff",
            "forecast",
            "httr",
            "memoise",
            "foreach",
            "snow",
            "ggplot2",
            "cclust",
            "randtoolbox",
            "dfoptim",
            "doSNOW",
            "scoringRules",
            "gridExtra",
            "reshape2",
            "VineCopula",
            "jsonlite",
            "skimr",
            "ranger",
            "glmnet",
            "xgboost",
            "e1071",
            "caret",
            "R6",
            "devtools",
            "vars",
            "rmarkdown", 
            "randomForest", 
            "fpp",
            "reticulate",
            "ForecastComb"
          ))
          pak::pkg_install("thierrymoudiki/misc")
        shell: Rscript {0}

      - name: Build source packages
        shell: Rscript {0}
        run: |
          # Setup directory
          repo_dir <- "r-packages"
          pkg_dir <- file.path(repo_dir, "src/contrib")
          dir.create(pkg_dir, recursive = TRUE, showWarnings = FALSE)
          
          # Initialize build status tracking
          build_status <- list(
            platform = "source",
            timestamp = format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
            packages = list()
          )
          
          # Read packages.json
          packages_info <- tryCatch({
            jsonlite::fromJSON("packages.json")
          }, error = function(e) {
            stop("Failed to read packages.json: ", conditionMessage(e))
          })
          
          message("Found packages: ", paste(packages_info$package, collapse = ", "))
          
          # Clone and build packages
          for (i in seq_len(nrow(packages_info))) {
            pkg <- packages_info$package[i]
            url <- paste0(packages_info$url[i], ".git")
            
            status_entry <- list(
              package = pkg,
              status = "FAILED",
              error_message = NULL,
              build_output = NULL,
              build_time = format(Sys.time(), "%Y-%m-%d %H:%M:%S")
            )
            
            message("\n====================================")
            message("Processing package: ", pkg)
            message("====================================\n")
            
            result <- tryCatch({
              # Clean up any existing directory
              if (dir.exists(pkg)) {
                unlink(pkg, recursive = TRUE)
              }
              
              # Clone repository
              clone_result <- system2("git", c("clone", url, pkg), stdout = TRUE, stderr = TRUE)
              if (!dir.exists(pkg)) {
                stop("Git clone failed: ", paste(clone_result, collapse = "\n"))
              }
              
              # List directory contents after clone
              message("Directory contents after clone:")
              print(list.files(pkg, recursive = FALSE))
              
              # Build source package
              message("\nBuilding source package...")
              build_cmd <- paste("R CMD build", pkg, "--no-build-vignettes --no-manual")
              build_output <- system(build_cmd, intern = TRUE)
              message("Build command output:")
              print(build_output)
              
              status_entry$status <- "SUCCESS"
              
              # Find the built package file
              pkg_files <- list.files(pattern = paste0("^", pkg, ".*\\.tar\\.gz$"))
              if (length(pkg_files) > 0) {
                # Move package file to repository directory
                file.copy(pkg_files[1], pkg_dir, overwrite = TRUE)
                file.remove(pkg_files[1])
              }
              
              status_entry$build_output <- paste(build_output, collapse = "\n")
              NULL
            }, error = function(e) {
              status_entry$error_message <- conditionMessage(e)
              if (!is.null(build_output)) {
                status_entry$build_output <- paste(build_output, collapse = "\n")
              }
              message("Error building package: ", conditionMessage(e))
              e
            }, finally = {
              # Clean up cloned directory
              if (dir.exists(pkg)) {
                unlink(pkg, recursive = TRUE)
              }
            })
            
            build_status$packages[[pkg]] <- status_entry
          }
          
          # Create PACKAGES files
          tryCatch({
            tools::write_PACKAGES(pkg_dir, type = "source")
          }, error = function(e) {
            message("Error creating PACKAGES files: ", conditionMessage(e))
          })
          
          # Print build summary
          message("\nBuild Summary:")
          successful <- sum(sapply(build_status$packages, function(x) x$status == "SUCCESS"))
          failed <- length(build_status$packages) - successful
          message("Successful builds: ", successful)
          message("Failed builds: ", failed)
          message("\nDetailed status:")
          print(jsonlite::toJSON(build_status, auto_unbox = TRUE, pretty = TRUE))
          
          # List final repository contents
          message("\nFinal repository contents:")
          print(list.files(pkg_dir))

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r-packages-source
          path: r-packages

  build-binaries:
    if: github.event.inputs.job_to_run == '' || github.event.inputs.job_to_run == 'build-binaries'
    needs: build-source
    strategy:
      fail-fast: false
      matrix:
        include:
          # Current release
          - os: windows-latest
            platform: win.binary
            r-version: 'release'
            path: bin/windows/contrib/4.3
            continue-on-error: false
            
          # Previous release
          - os: windows-latest
            platform: win.binary
            r-version: 'oldrel'
            path: bin/windows/contrib/4.2
            continue-on-error: false
            
          # Development version - allowed to fail
          - os: windows-latest
            platform: win.binary
            r-version: 'devel'
            path: bin/windows/contrib/4.4
            continue-on-error: true

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      # Add verbose cleanup and verification
      - name: Clean workspace
        shell: pwsh
        run: |
          Write-Host "Current directory: $PWD"
          Write-Host "Initial contents:"
          Get-ChildItem -Force
          
          Write-Host "Cleaning workspace..."
          Remove-Item -Path "r-packages" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "artifacts" -Recurse -Force -ErrorAction SilentlyContinue
          New-Item -Path "r-packages/${{ matrix.path }}" -ItemType Directory -Force
          
          Write-Host "After cleanup:"
          Get-ChildItem -Force
          Write-Host "r-packages contents:"
          Get-ChildItem -Path "r-packages" -Recurse -File | Select-Object FullName

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          
      - name: Verify R installation
        run: |
          Rscript -e "R.version"
          which Rscript
        shell: bash

      - name: Install Rtools (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install rtools
          echo "C:/rtools44/x86_64-w64-mingw32.static.posix/bin" >> $GITHUB_PATH
          echo "C:/rtools44/usr/bin" >> $GITHUB_PATH
          # Add verification steps
          echo "Verifying Rtools installation:"
          ls "C:/rtools44"
          echo "PATH environment variable:"
          echo $PATH
          where gcc
          where make
        shell: bash

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install qpdf
          brew install --cask basictex

      - name: Install pak and dependencies
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/dev/")
          pak::pak(c(
            "remotes", 
            "Rcpp",
            "timeDate",
            "zoo",
            "xts",
            "tseries",
            "fracdiff",
            "forecast",
            "httr",
            "memoise",
            "foreach",
            "snow",
            "ggplot2",
            "cclust",
            "randtoolbox",
            "dfoptim",
            "doSNOW",
            "scoringRules",
            "gridExtra",
            "reshape2",
            "VineCopula",
            "jsonlite",
            "skimr",
            "ranger",
            "glmnet",
            "xgboost",
            "e1071",
            "caret",
            "R6",
            "devtools",
            "vars",
            "rmarkdown",
            "randomForest",
            "fpp",
            "reticulate",
            "ForecastComb"
          ))
          pak::pkg_install("thierrymoudiki/misc")
        shell: Rscript {0}

      - name: Download source packages
        uses: actions/download-artifact@v4
        with:
          name: r-packages-source
          path: r-packages-source

      - name: Build binary packages
        shell: Rscript {0}
        env:
          _R_CHECK_FORCE_SUGGESTS_: false
        run: |
          # Setup directory
          repo_dir <- "r-packages"
          pkg_dir <- file.path(repo_dir, "${{ matrix.path }}")
          dir.create(pkg_dir, recursive = TRUE, showWarnings = FALSE)
          
          message("Building binaries for platform: ${{ matrix.platform }}")
          message("Output directory: ", pkg_dir)
          
          # Initialize build status tracking
          build_status <- list(
            platform = "${{ matrix.platform }}",
            timestamp = format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
            packages = list()
          )
          
          # Download source packages
          src_dir <- "r-packages-source/src/contrib"
          pkg_files <- list.files(src_dir, pattern = "\\.tar\\.gz$", full.names = TRUE)
          message("Found source packages: ", paste(basename(pkg_files), collapse = ", "))
          
          # Build each package
          for (pkg_file in pkg_files) {
            pkg_name <- sub("_.*$", "", basename(pkg_file))
            message("\nProcessing package: ", pkg_name)
            
            status_entry <- list(
              package = pkg_name,
              status = "FAILED",
              error_message = NULL,
              build_output = NULL,
              build_time = format(Sys.time(), "%Y-%m-%d %H:%M:%S")
            )
            
            result <- tryCatch({
              # Install binary package
              message("Building binary package...")
              install_output <- system2("R", 
                c("CMD", "INSTALL", "--build", pkg_file, "--no-multiarch"),
                stdout = TRUE, stderr = TRUE)
              message("Build output:")
              print(install_output)
              
              # Find and move the built binary package
              if (Sys.info()["sysname"] == "Windows") {
                bin_pattern <- paste0("^", pkg_name, ".*\\.zip$")
              } else {
                bin_pattern <- paste0("^", pkg_name, ".*\\.tgz$")
              }
              
              bin_files <- list.files(pattern = bin_pattern)
              message("Found binary files: ", paste(bin_files, collapse = ", "))
              
              if (length(bin_files) > 0) {
                message("Moving ", bin_files[1], " to ", pkg_dir)
                file.copy(bin_files[1], pkg_dir, overwrite = TRUE)
                file.remove(bin_files[1])
                status_entry$status <- "SUCCESS"
                message("Binary package copied to repository")
              } else {
                status_entry$error_message <- "No binary package found after build"
                message("WARNING: No binary package found after build!")
              }
              
              status_entry$build_output <- paste(install_output, collapse = "\n")
              NULL
            }, error = function(e) {
              message("Error processing package: ", basename(pkg_file))
              message("Error message: ", e$message)
              status_entry$error_message <- conditionMessage(e)
              if (exists("install_output")) {
                status_entry$build_output <- paste(install_output, collapse = "\n")
              }
              e
            })
            
            build_status$packages[[pkg_name]] <- status_entry
          }
          
          message("\nCreating PACKAGES files...")
          tools::write_PACKAGES(pkg_dir, type = "${{ matrix.platform }}")
          message("PACKAGES files created")
          
          message("\nFinal repository contents:")
          print(list.files(pkg_dir, recursive = TRUE))
          
          # Save build status
          status_file <- file.path(repo_dir, sprintf("build_status_%s.json", "${{ matrix.platform }}"))
          jsonlite::write_json(build_status, status_file, pretty = TRUE, auto_unbox = TRUE)
          
          # Print summary
          message("\nBuild Summary:")
          successful <- sum(sapply(build_status$packages, function(x) x$status == "SUCCESS"))
          failed <- sum(sapply(build_status$packages, function(x) x$status == "FAILED"))
          message("Successful builds: ", successful)
          message("Failed builds: ", failed)
          message("\nDetailed status:")
          print(jsonlite::toJSON(build_status, pretty = TRUE, auto_unbox = TRUE))

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r-packages-${{ matrix.os }}-${{ matrix.r-version }}
          path: r-packages

  finalize:
    if: github.event.inputs.job_to_run == '' || github.event.inputs.job_to_run == 'finalize'
    needs: [build-source, build-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      # Add verbose cleanup and verification
      - name: Clean workspace
        run: |
          echo "Current directory: $(pwd)"
          echo "Initial contents:"
          ls -la
          
          echo "Cleaning workspace..."
          rm -rf r-packages artifacts
          mkdir -p r-packages artifacts
          
          echo "After cleanup:"
          ls -la
          
          echo "Verifying clean state:"
          echo "r-packages contents:"
          find r-packages -type f || echo "r-packages is empty (good!)"
          echo "artifacts contents:"
          find artifacts -type f || echo "artifacts is empty (good!)"
          
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
      
      # Clean existing r-packages directory
      - name: Clean existing packages
        run: |
          echo "Cleaning existing r-packages directory..."
          rm -rf r-packages
          mkdir -p r-packages
      
      # Clean and prepare artifacts directory
      - name: Clean artifacts directory
        run: |
          echo "Cleaning artifacts directory..."
          rm -rf artifacts
          mkdir -p artifacts
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Verify downloaded artifacts
        run: |
          echo "Downloaded artifacts contents:"
          find artifacts -type f
          
          echo "Checking for old versions:"
          find artifacts -name "ahead_*.tgz" -o -name "ahead_*.zip" -o -name "ahead_*.tar.gz"
          
      - name: Merge artifacts
        run: |
          mkdir -p r-packages
          
          echo "Processing source packages..."
          cp -rv artifacts/r-packages-source/* r-packages/
          
          echo "Processing binary packages..."
          for artifact in artifacts/r-packages-*; do
            if [ "$artifact" != "artifacts/r-packages-source" ]; then
              echo "Processing $artifact..."
              cp -rv $artifact/* r-packages/
            fi
          done
          
          # List all package files for debugging
          echo "All package files after merge:"
          find r-packages -type f -name "ahead_*"

      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          
          # Stage and commit our changes first
          git add .
          git commit -m "Update R packages repository" || echo "No changes to commit"
          
          # Fetch latest changes
          git fetch origin main
          
          # Rebase our commit on top of main
          git rebase origin/main
          
          # Push the result
          git push origin main

      - name: Verify Windows build environment
        if: runner.os == 'Windows'
        shell: Rscript {0}
        run: |
          message("R version:")
          print(R.version)
          
          message("\nR home directory:")
          print(R.home())
          
          message("\nSystem PATH:")
          print(Sys.getenv("PATH"))
          
          message("\nChecking for Rtools:")
          print(pkgbuild::find_rtools())

      - name: Clean up repository
        run: |
          # Function to clean a specific directory
          clean_packages() {
            local dir="$1"
            echo "Cleaning directory: $dir"
            
            # Get all unique package base names
            declare -A latest_versions
            declare -A latest_files
            
            # Process all package files
            for file in "$dir"/*.[tz][giz][zgp]; do
              if [ ! -f "$file" ]; then continue; fi
              
              # Get package name and version
              base_name=$(basename "$file" | sed -E 's/(.*)_[0-9]+\.[0-9]+\.[0-9]+.*/\1/')
              version=$(basename "$file" | sed -E 's/.*_([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
              
              # Update if this is the latest version
              if [ -z "${latest_versions[$base_name]}" ] || \
                 [ "$(printf '%s\n' "${latest_versions[$base_name]}" "$version" | sort -V | tail -n1)" = "$version" ]; then
                latest_versions[$base_name]="$version"
                latest_files[$base_name]="$file"
              fi
            done
            
            # Remove older versions
            for file in "$dir"/*.[tz][giz][zgp]; do
              if [ ! -f "$file" ]; then continue; fi
              
              base_name=$(basename "$file" | sed -E 's/(.*)_[0-9]+\.[0-9]+\.[0-9]+.*/\1/')
              if [ "$file" != "${latest_files[$base_name]}" ]; then
                echo "Removing old version: $file"
                rm "$file"
              fi
            done
            
            # Rebuild PACKAGES files
            if [[ "$dir" == */macosx/* ]]; then
              Rscript -e "tools::write_PACKAGES('$dir', type='mac.binary')"
            elif [[ "$dir" == */windows/* ]]; then
              Rscript -e "tools::write_PACKAGES('$dir', type='win.binary')"
            else
              Rscript -e "tools::write_PACKAGES('$dir', type='source')"
            fi
          }
          
          # Clean source packages
          clean_packages "src/contrib"
          
          # Clean Mac packages for each R version
          for ver_dir in bin/macosx/contrib/[0-9].*; do
            if [ -d "$ver_dir" ]; then
              clean_packages "$ver_dir"
            fi
          done
          
          # Clean Windows packages for each R version
          for ver_dir in bin/windows/contrib/[0-9].*; do
            if [ -d "$ver_dir" ]; then
              clean_packages "$ver_dir"
            fi
          done
          
          # Also clean the root contrib directories
          clean_packages "bin/macosx/contrib"
          clean_packages "bin/windows/contrib"
